/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 vk.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
*/
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 vk.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

def defineLib(Project project, String name) {
    def knetVersionCode = 3
    def knetVersion = "1.0"
    def knetPackage = "com.vk.knet"

    project.apply plugin: "com.android.library"
    project.apply plugin: "kotlin-android"

    try {
        project.apply from: "${project.rootDir}/knet/dependencies.gradle"
        project.apply from: "${project.rootDir}/knet/publish.gradle"
    } catch(Exception ignored) {
        project.apply from: "${project.rootDir}/dependencies.gradle"
        project.apply from: "${project.rootDir}/publish.gradle"
    }

    project.version = knetVersion
    project.group = knetPackage

    project.android {
        compileSdkVersion = 31
        buildToolsVersion = "31.0.0"

        defaultConfig {
            minSdkVersion 19
            targetSdkVersion 31
            versionCode knetVersionCode
            versionName knetVersion
        }

        packagingOptions {
            exclude("builddef.lst")
            exclude("**/com/**")
            exclude("META-INF/*.kotlin_module")
            exclude("META-INF/*.version")
            exclude("autoTest/**")
            exclude("META-INF/spring.*")
            exclude("META-INF/notice.txt")
            exclude("mockito-extensions/org.mockito.plugins.MockMaker")
            jniLibs.keepDebugSymbols += "**.so"
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        buildTypes {
            release {
                consumerProguardFile("${project.projectDir}/consumer-internal-proguard-rules.pro")
                consumerProguardFile("${project.projectDir}/consumer-external-proguard-rules.pro")
            }
        }

        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    project.configurations {
        // Used for correct javadoc generation
        javadocDeps
    }

    // Apply dependencies
    def depDefinition = ext.knetDeps[name]
    if (depDefinition != null) {
        depDefinition(project)
    }

    // Apply publish info
    def publishDefinition = ext.knetPublish[name]
    if (publishDefinition != null) {
        ext.sdkPublish = new HashMap<String, String>()
        ext.sdkPublish["POM_ARTIFACT_ID"] = publishDefinition.id()
        ext.sdkPublish["POM_ARTIFACT_DESCRIPTION"] = publishDefinition.description()
        ext.sdkPublish["POM_NAME"] = publishDefinition.name()

        ext.sdkPublish["POM_URL"] = "https://github.com/VKCOM/KNet"
        ext.sdkPublish["POM_SCM_URL"] = "https://github.com/VKCOM/KNet"
        ext.sdkPublish["POM_SCM_CONNECTION"] = "scm:git:git://github.com/VKCOM/KNet.git"
        ext.sdkPublish["POM_SCM_DEV_CONNECTION"] = "scm:git:git://github.com/VKCOM/KNet.git"
        ext.sdkPublish["POM_LICENCE_URL"] = "https://github.com/VKCOM/KNet/blob/main/LICENSE"

        try {
            try {
                apply from: "${project.rootDir}/lib-api/sdk/publish.gradle"
            } catch(Exception ignored) {
                File root = project.rootDir.parentFile
                apply from: "${root}/lib-api/sdk/publish.gradle"
            }
        } catch(Exception error) {
            println("Apply publish error")
            error.printStackTrace()
        }
    }
}

ext.knetDefineLib = { Project project, String name ->
    defineLib(project, name)
}
